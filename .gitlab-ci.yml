# docker镜像 此镜像源node版本v10.14.2
image: registry-itwork.yonghui.cn/public/cibase:0.8.1


# gitlab CI pipeline
stages:
  - info
  - install
  - build       # 项目编译打包
  - deploy      # 构建Docker镜像


# 打印环境
echo environment info:
  stage: info
  script:
    - node -v
    - npm -v
    - npm list
  when: manual


# 下载项目依赖包
install dependencies:
  # 场景为 install
  stage: install
  # 自定义脚本
  script:
    - npm i -registry http://npm.yonghui.cn/repository/npm-group/
    - tar -zcf node_modules.tar.gz node_modules/  # 压缩
    - rm -rf node_modules   # 删除安装目录，统一使用缓存依赖
    - mkdir -p /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/  # 创建缓存目录
    - rm -rf /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/node_modules.tar.gz   # 删除老依赖
    - cp node_modules.tar.gz /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/  # 缓存
  when: manual


build prod:
  stage: build
  script:
    - cp /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/node_modules.tar.gz ./
    - tar -zxf node_modules.tar.gz
    - chmod -R 777 node_modules
    - npm run build-prod
    - mkdir -p /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    - cp -r dist /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/dist
  only:
    - master
    - tags
    - /^release-.*$/


build test:
  stage: build
  script:
    - cp /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/node_modules.tar.gz ./
    - tar -zxf node_modules.tar.gz
    - chmod -R 777 node_modules
    - npm run build-test
    - mkdir -p /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    - cp -r dist /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/dist
  only:
    - /^test-.*$/


build dev:
  stage: build
  script:
    - cp /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}/node_modules.tar.gz ./
    - tar -zxf node_modules.tar.gz
    - chmod -R 777 node_modules
    - npm run build-dev
    - mkdir -p /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    - cp -r dist /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/dist
  only:
    - /^dev-.*$/


create docker image:
  image: registry.cn-hangzhou.aliyuncs.com/choerodon-tools/cibase:0.7.0
  stage: deploy
  script:
    - docker_build
    - rm -rf /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    - chart_build
  only:
    - master
    - tags
    - /^release-.*$/
    - /^test-.*$/
    - /^dev-.*$/


.auto_devops: &auto_devops |
  http_status_code=`curl -o .auto_devops.sh -s -m 10 --connect-timeout 10 -w %{http_code} "${CHOERODON_URL}/devops/ci?token=${Token}&type=front"`
  if [ "$http_status_code" != "200" ]; then
    cat .auto_devops.sh
    exit 1
  fi
  source .auto_devops.sh

  function docker_build(){
      cp -r /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/* ${1:-"."}
      docker login -u ${DOCKER_USER} -p ${DOCKER_PWD} ${DOCKER_REGISTRY}
      docker build --pull -t ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG} ${1:-"."}
      docker push ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG}
  }


# 开始执行脚本前所需执行脚本
before_script:
  - *auto_devops
